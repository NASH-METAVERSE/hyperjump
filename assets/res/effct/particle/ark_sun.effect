/**
 * Date / 日期            : 20220112
 * Ref / 引用             : https://www.shadertoy.com/view/XlXXzX
 * Template / 模板        : v3::builtin-unlit
 */

CCEffect %{
	  techniques: 
    - 
      name: opaque
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            iChannel1: 
              value: white
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color
    - 
      name: transparent
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          depthStencilState: 
            depthTest: true
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color
    - 
      name: add
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          rasterizerState: 
            cullMode: none
          depthStencilState: 
            depthTest: true
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one
                blendSrcAlpha: src_alpha
                blendDstAlpha: one
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color
    - 
      name: alpha-blend
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          rasterizerState: 
            cullMode: none
          depthStencilState: 
            depthTest: true
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendSrcAlpha: src_alpha
                blendDstAlpha: one_minus_src_alpha
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color

}%

CCProgram unlit-vs %{
	precision highp float;
	#include <input>
	#include <cc-global>
	#include <cc-local-batch>
	#include <input>
	#include <cc-fog-vs>
  
	#if USE_VERTEX_COLOR
	  in lowp vec4 a_color;
	  out lowp vec4 v_color;
	#endif
  
	#if USE_TEXTURE
	  out vec2 uv0;
	  uniform TexCoords {
		  vec4 tilingOffset;
	  };
	#endif
  
	vec4 vert () {
	  vec4 position;
	  CCVertInput(position);
  
	  mat4 matWorld;
	  CCGetWorldMatrix(matWorld);
  
	  #if USE_TEXTURE
	  	uv0 = a_texCoord * tilingOffset.xy + tilingOffset.zw;
		#if SAMPLE_FROM_RT
		  CC_HANDLE_RT_SAMPLE_FLIP(uv0);
		#endif
	  #endif
  
	  #if USE_VERTEX_COLOR
		v_color = a_color;
	  #endif
  
	  CC_TRANSFER_FOG(matWorld * position);
	  return cc_matProj * (cc_matView * matWorld) * position;
	}
}%

CCProgram unlit-fs %{
	precision highp float;
	#include <output>
	#include <cc-fog-fs>
	#include <cc-global>
  
	#if USE_ALPHA_TEST
	  #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
	#endif
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  uniform sampler2D mainTexture;
	#endif
  
	uniform Constant {
	  vec4 mainColor;
	  vec4 colorScaleAndCutoff;
	  vec4 iMouse;
	  vec2 iResolution;
	};
  
	#if USE_VERTEX_COLOR
	  in lowp vec4 v_color;
	#endif

	uniform sampler2D iChannel1;

	float snoise(vec3 uv, float res){
    const vec3 s = vec3(1e0, 1e2, 1e4);
    uv *= res;
    vec3 uv0 = floor(mod(uv, res))*s;
    vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;
    vec3 f = fract(uv); f = f*f*(3.0-2.0*f);
    vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
                uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);
    vec4 r = fract(sin(v*1e-3)*1e5);
    float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);
    r = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);
    float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);
    return mix(r0, r1, f.z)*2.-1.;
    }
  float freqs[4];
  vec4 frag() {
    vec4 ssr_frag_out;
    // 球面空間における時間
    freqs[0] = texture( iChannel1, vec2( 0.02, 0.25 ) ).x;
    freqs[1] = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;
    freqs[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;
    freqs[3] = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;
    // 亮度
    float brightness	= freqs[1] * 0.35 + freqs[2] * 0.25; 
    // 纹理半径
    float radius		= 0.3 + brightness * 0.25;
    // 内径 
    float invRadius 	= 1.0 / radius;
    //色彩
    // vec3 orange			= vec3(((freqs[1]) * 0.9), 0.5, ((freqs[0]) * 0.9)) * (1.0); 
    vec3 orange			= vec3(0.85, 0.35, 0.15) * (1.0); 
    // 光晕
    vec3 orangeRed		= vec3( ((freqs[2]) * 0.9), 0.3, ((freqs[3]) * 0.9) ) * (1.0); 
    float time		= cc_time[0] * 0.1;
    // 星球大小
    float aspect	= iResolution.x / iResolution.y;
    vec2 uv	= uv0;
    // 星球位置
    vec2 p 	= -0.5 + uv;
    p.x *= aspect;
    // 火焰大小
    float fade		= pow( length( 1.6 * p ), 0.6 );
    // 火焰大小
    float fVal1		= 1.0 - fade;
    // 火焰大小
    float fVal2		= 1.0 - fade;
    // 火焰角度
    float angle		= atan( p.x, p.y )/6.2832;
    float dist		= length(p);
    // 火焰移动速度
    vec3 coord		= vec3( angle, dist, time * 0.1 );
    float newTime1	= abs( snoise( coord + vec3( 0.0, -time * ( 0.35 + brightness * 0.001 ), time * 0.015 ), 15.0 ) );
    float newTime2	= abs( snoise( coord + vec3( 0.0, -time * ( 0.15 + brightness * 0.001 ), time * 0.015 ), 45.0 ) );	
    // 火焰柔和度
    for(int i=1; i<=7; i++ ){
      float power = pow( 2.0, float(i + 1) );
      fVal1 += ( 0.7 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 10.0 ) * ( newTime1 + 1.0 ) ) );
      fVal2 += ( 0.7 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 25.0 ) * ( newTime2 + 1.0 ) ) );
    }
    // 火焰范围
    float corona	= pow( fVal1 * max( 1.1 - fade, 0.0 ), 2.0 ) * 25.0;  
    corona	+= pow( fVal2 * max( 1.1 - fade, 0.0 ), 2.0 ) * 25.0;  
    corona	*= 1.5 - newTime1;
    // 球面纹理 
    vec3 sphereNormal = vec3( 0.0, 0.0, 1.0 );
    vec3 dir 	= vec3( 0.0 );
    vec3 center	= vec3( 0.5, 0.5, 1.0 );
    vec3 starSphere	= vec3( 0.05 );
    // 球面位置
    vec2 sp = -1.0 + 2.0 * uv;
    sp.x *= aspect;
    sp *= ( 1.95 - brightness ); 
    float r = dot(sp,sp);
    float f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5; 
    if( dist < radius ){  
      corona	*= pow( dist * invRadius, 24.0 );
      vec2 newUv;
      newUv.x = sp.x*f;
      newUv.y = sp.y*f;
      newUv += vec2( time, 0.0 );
      vec3 texSample 	= texture(mainTexture, newUv).rgb;
      float uOff	= (texSample.g * brightness * 4.5 + time );
      vec2 starUV	= newUv + vec2( uOff, 0.0 );
      starSphere	= texture(mainTexture, starUV).rgb;
    }
      float starGlow	= min(max(1.0 - dist * ( 1.0 - brightness ), 0.0), 1.0 );
      ssr_frag_out.rgb	= vec3( f * ( 0.75 + brightness * 0.3 ) * orange ) + starSphere + corona * orange + starGlow * orangeRed;
      ssr_frag_out.a		= 1.0;

      #if USE_ALPHA_TEST
        // if (ssr_frag_out.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
        if (ssr_frag_out.r < 0.3) discard;

      #endif

      return ssr_frag_out;
  }
}%

