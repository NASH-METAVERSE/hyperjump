/**
 * Date / 日期            : 20220111
 * Ref / 引用             : Unknown
 * Template / 模板        : v3::builtin-unlit
 */

CCEffect %{
	  techniques: 
    - 
      name: opaque
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
            NC0: 
              value: 
                - 0
                - 157
                - 113
                - 270
              inspector: 
                type: color
            NC1: 
              value: 
                - 1
                - 158
                - 114
                - 271
              inspector: 
                type: color
            WS: 
              value: 
                - 0.25
                - 0.25
                - 0.25
                - 0.25
              inspector: 
                type: color
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color
    - 
      name: transparent
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          depthStencilState: 
            depthTest: true
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color
    - 
      name: add
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          rasterizerState: 
            cullMode: none
          depthStencilState: 
            depthTest: true
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one
                blendSrcAlpha: src_alpha
                blendDstAlpha: one
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color
    - 
      name: alpha-blend
      passes: 
        - 
          vert: unlit-vs:vert
          frag: unlit-fs:frag
          rasterizerState: 
            cullMode: none
          depthStencilState: 
            depthTest: true
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendSrcAlpha: src_alpha
                blendDstAlpha: one_minus_src_alpha
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            mainTexture: 
              value: grey
            tilingOffset: 
              value: 
                - 1
                - 1
                - 0
                - 0
            mainColor: 
              value: 
                - 1
                - 1
                - 1
                - 1
              editor: 
                type: color
            colorScale: 
              value: 
                - 1
                - 1
                - 1
              target: colorScaleAndCutoff.xyz
            alphaThreshold: 
              value: 0.5
              target: colorScaleAndCutoff.w
              editor: 
                parent: USE_ALPHA_TEST
            color: 
              target: mainColor
              editor: 
                visible: false
          migrations: 
            properties: 
              mainColor: 
                formerlySerializedAs: color

}%

CCProgram unlit-vs %{
	precision highp float;
	#include <input>
	#include <cc-global>
	#include <cc-local-batch>
	#include <input>
	#include <cc-fog-vs>
  
	#if USE_VERTEX_COLOR
	  in lowp vec4 a_color;
	  out lowp vec4 v_color;
	#endif
  
	#if USE_TEXTURE
	  out vec2 uv0;
	  uniform TexCoords {
		vec4 tilingOffset;
	  };
	#endif
  
	vec4 vert () {
	  vec4 position;
	  CCVertInput(position);
  
	  mat4 matWorld;
	  CCGetWorldMatrix(matWorld);
  
	  #if USE_TEXTURE
	  	uv0 = a_texCoord * tilingOffset.xy + tilingOffset.zw;
		#if SAMPLE_FROM_RT
		  CC_HANDLE_RT_SAMPLE_FLIP(uv0);
		#endif
	  #endif
  
	  #if USE_VERTEX_COLOR
		v_color = a_color;
	  #endif
  
	  CC_TRANSFER_FOG(matWorld * position);
	  return cc_matProj * (cc_matView * matWorld) * position;
	}
}%

CCProgram unlit-fs %{
	precision highp float;
	#include <output>
	#include <cc-fog-fs>
	#include <cc-global>
  
	#if USE_ALPHA_TEST
	  #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
	#endif
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  uniform sampler2D mainTexture;
	#endif
  
	uniform Constant {
	  vec4 mainColor;
	  vec4 colorScaleAndCutoff;
	  	vec4 iMouse;
	vec4 NC0;
	vec4 NC1;
	vec4 WS;
	vec2 iResolution;

	};
  
	#if USE_VERTEX_COLOR
	  in lowp vec4 v_color;
	#endif

	
	


vec4 hash4( vec4 n ) { return fract(sin(n)*1399763.5453123); }
vec3 hash3( vec3 n ) { return fract(sin(n)*1399763.5453123); }
vec3 hpos( vec3 n ) { return hash3(vec3(dot(n,vec3(157.0,113.0,271.0)),dot(n,vec3(271.0,157.0,113.0)),dot(n,vec3(113.0,271.0,157.0)))); }
float noise4q(vec4 x)
{
	vec4 n3 = vec4(0,0.25,0.5,0.75);
	vec4 p2 = floor(x.wwww+n3);
	vec4 b = floor(x.xxxx+n3) + floor(x.yyyy+n3)*157.0 + floor(x.zzzz +n3)*113.0;
	vec4 p1 = b + fract(p2*0.00390625)*vec4(164352.0, -164352.0, 163840.0, -163840.0);
	p2 = b + fract((p2+1.0)*0.00390625)*vec4(164352.0, -164352.0, 163840.0, -163840.0);
	vec4 f1 = fract(x.xxxx+n3);
	vec4 f2 = fract(x.yyyy+n3);
	f1=f1*f1*(3.0-2.0*f1);
	f2=f2*f2*(3.0-2.0*f2);
	vec4 n1 = vec4(0,1.0,157.0,158.0);
	vec4 n2 = vec4(113.0,114.0,270.0,271.0);	
	vec4 vs1 = mix(hash4(p1), hash4(n1.yyyy+p1), f1);
	vec4 vs2 = mix(hash4(n1.zzzz+p1), hash4(n1.wwww+p1), f1);
	vec4 vs3 = mix(hash4(p2), hash4(n1.yyyy+p2), f1);
	vec4 vs4 = mix(hash4(n1.zzzz+p2), hash4(n1.wwww+p2), f1);	
	vs1 = mix(vs1, vs2, f2);
	vs3 = mix(vs3, vs4, f2);
	vs2 = mix(hash4(n2.xxxx+p1), hash4(n2.yyyy+p1), f1);
	vs4 = mix(hash4(n2.zzzz+p1), hash4(n2.wwww+p1), f1);
	vs2 = mix(vs2, vs4, f2);
	vs4 = mix(hash4(n2.xxxx+p2), hash4(n2.yyyy+p2), f1);
	vec4 vs5 = mix(hash4(n2.zzzz+p2), hash4(n2.wwww+p2), f1);
	vs4 = mix(vs4, vs5, f2);
	f1 = fract(x.zzzz+n3);
	f2 = fract(x.wwww+n3);
	f1=f1*f1*(3.0-2.0*f1);
	f2=f2*f2*(3.0-2.0*f2);
	vs1 = mix(vs1, vs2, f1);
	vs3 = mix(vs3, vs4, f1);
	vs1 = mix(vs1, vs3, f2);
	float r=dot(vs1,vec4(0.25));
	return r*r*(3.0-2.0*r);
}
float noiseSpere(vec3 ray,vec3 pos,float r,mat3 mr,float zoom,vec3 subnoise,float anim)
{
  	float b = dot(ray,pos);
  	float c = dot(pos,pos) - b*b;
    vec3 r1=vec3(0.0);
    float s=0.0;
    float d=0.03125;
    float d2=zoom/(d*d); 
    float ar=5.0;
    for (int i=0;i<3;i++) {
		float rq=r*r;
        if(c <rq)
        {
            float l1=sqrt(rq-c);
            r1= ray*(b-l1)-pos;
            r1=r1*mr;
            s+=abs(noise4q(vec4(r1*d2+subnoise*ar,anim*ar))*d);
        }
        ar-=2.0;
        d*=4.0;
        d2*=0.0625;
        r=r-r*0.02;
    }
    return s;
}
float ring(vec3 ray,vec3 pos,float r,float size)
{
  	float b = dot(ray,pos);
  	float c = dot(pos,pos) - b*b;
    float s=max(0.0,(1.0-size*abs(r-sqrt(c))));
    return s;
}
float ringRayNoise(vec3 ray,vec3 pos,float r,float size,mat3 mr,float anim)
{
  	float b = dot(ray,pos);
    vec3 pr=ray*b-pos;
    float c=length(pr);
    pr*=mr;
    pr=normalize(pr);
    float s=max(0.0,(1.0-size*abs(r-c)));
    float nd=noise4q(vec4(pr*1.0,-anim+c))*2.0;
    nd=pow(nd,2.0);
    float n=0.4;
    float ns=1.0;
    if (c>r) {
        n=noise4q(vec4(pr*10.0,-anim+c));
        ns=noise4q(vec4(pr*50.0,-anim*2.5+c*2.0))*2.0;
    }
    n=n*n*nd*ns;
    return pow(s,4.0)+s*s*n;
}
vec4 noiseSpace(vec3 ray,vec3 pos,float r,mat3 mr,float zoom,vec3 subnoise,float anim)
{
  	float b = dot(ray,pos);
  	float c = dot(pos,pos) - b*b;
    vec3 r1=vec3(0.0);
    float s=0.0;
    float d=0.0625*1.5;
    float d2=zoom/d;
	float rq=r*r;
    float l1=sqrt(abs(rq-c));
    r1= (ray*(b-l1)-pos)*mr;
    r1*=d2;
    s+=abs(noise4q(vec4(r1+subnoise,anim))*d);
    s+=abs(noise4q(vec4(r1*0.5+subnoise,anim))*d*2.0);
    s+=abs(noise4q(vec4(r1*0.25+subnoise,anim))*d*4.0);
    return vec4(s*2.0,abs(noise4q(vec4(r1*0.1+subnoise,anim))),abs(noise4q(vec4(r1*0.1+subnoise*6.0,anim))),abs(noise4q(vec4(r1*0.1+subnoise*13.0,anim))));
}
float sphereZero(vec3 ray,vec3 pos,float r)
{
  	float b = dot(ray,pos);
  	float c = dot(pos,pos) - b*b;
    float s=1.0;
    if (c<r*r) s=0.0;
    return s;
}
vec4 frag() {
	vec4 ssr_frag_out;
	vec2 p = (2.0 * uv0 - 1.0);
    float time=cc_time[0]*1.0;
	float mx = iMouse.z>0.0?iMouse.x/iResolution.x*10.0:time*0.025;
    float my = iMouse.z>0.0?iMouse.y/iResolution.y*4.0-2.0:-0.6;
    vec2 rotate = vec2(mx,my);
    vec2 sins=sin(rotate);
    vec2 coss=cos(rotate);
    mat3 mr=mat3(vec3(coss.x,0.0,sins.x),vec3(0.0,1.0,0.0),vec3(-sins.x,0.0,coss.x));
    mr=mat3(vec3(1.0,0.0,0.0),vec3(0.0,coss.y,sins.y),vec3(0.0,-sins.y,coss.y))*mr;    
    mat3 imr=mat3(vec3(coss.x,0.0,-sins.x),vec3(0.0,1.0,0.0),vec3(sins.x,0.0,coss.x));
    imr=imr*mat3(vec3(1.0,0.0,0.0),vec3(0.0,coss.y,-sins.y),vec3(0.0,sins.y,coss.y));
    vec3 ray = normalize(vec3(p,2.0));
    vec3 pos = vec3(0.0,0.0,3.0);
    float s1=noiseSpere(ray,pos,1.0,mr,0.5,vec3(0.0),time);
    s1=pow(min(1.0,s1*2.4),2.0);
    float s2=noiseSpere(ray,pos,1.0,mr,4.0,vec3(83.23,34.34,67.453),time);
    s2=min(1.0,s2*2.2);
    ssr_frag_out = vec4( mix(vec3(1.0,1.0,0.0),vec3(1.0),pow(s1,60.0))*s1, 1.0 );
    ssr_frag_out += vec4( mix(mix(vec3(1.0,0.0,0.0),vec3(1.0,0.0,1.0),pow(s2,2.0)),vec3(1.0),pow(s2,10.0))*s2, 1.0 );
    ssr_frag_out.xyz -= vec3(ring(ray,pos,1.03,11.0))*2.0;
    ssr_frag_out = max( vec4(0.0), ssr_frag_out );
    float s3=ringRayNoise(ray,pos,0.96,1.0,mr,time);
    ssr_frag_out.xyz += mix(vec3(1.0,0.6,0.1),vec3(1.0,0.95,1.0),pow(s3,3.0))*s3;
    float zero=sphereZero(ray,pos,0.9);
    if (zero>0.0) {
	    vec4 s4=noiseSpace(ray,pos,100.0,mr,0.05,vec3(1.0,2.0,4.0),0.0);
    	s4.x=pow(s4.x,3.0);
    	ssr_frag_out.xyz += mix(mix(vec3(1.0,0.0,0.0),vec3(0.0,0.0,1.0),s4.y*1.9),vec3(0.9,1.0,0.1),s4.w*0.75)*s4.x*pow(s4.z*2.5,3.0)*0.2*zero;
    }
    ssr_frag_out = max( vec4(0.0), ssr_frag_out );
	ssr_frag_out = min( vec4(1.0), ssr_frag_out );

		#if USE_ALPHA_TEST
		if (ssr_frag_out.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
		#endif
		return ssr_frag_out;
}
}%

