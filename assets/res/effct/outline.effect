CCEffect %{
	  techniques: 
    - 
      passes: 
        - 
          vert: sprite-vs:vert
          frag: sprite-fs:frag
          depthStencilState: 
            depthTest: false
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          rasterizerState: 
            cullMode: none
          properties: 
            alphaThreshold: 
              value: 0.5

}%

CCProgram sprite-vs %{
	precision highp float;
	#include <cc-global>
	#if USE_LOCAL
	  #include <cc-local>
	#endif
	#if SAMPLE_FROM_RT
	  #include <common>
	#endif
	in vec3 a_position;
	in vec2 a_texCoord;
	in vec4 a_color;
  
	out vec4 color;
	out vec2 uv0;
  
	vec4 vert () {
	  vec4 pos = vec4(a_position, 1);
  
	  #if USE_LOCAL
		pos = cc_matWorld * pos;
	  #endif
  
	  #if USE_PIXEL_ALIGNMENT
		pos = cc_matView * pos;
		pos.xyz = floor(pos.xyz);
		pos = cc_matProj * pos;
	  #else
		pos = cc_matViewProj * pos;
	  #endif
  
	  uv0 = a_texCoord;
	  #if SAMPLE_FROM_RT
		CC_HANDLE_RT_SAMPLE_FLIP(uv0);
	  #endif
	  color = a_color;
  
	  return pos;
	}
}%

CCProgram sprite-fs %{
	precision highp float;
	#include <embedded-alpha>
	#include <alpha-test>
	#include <cc-global>
  
	in vec4 color;
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  #pragma builtin(local)
	  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
	#endif

	vec4 frag() {

    vec4 o = vec4(1, 1, 1, 1);
	o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
	vec4 ssr_frag_out;
	vec2 uv = uv0;
    vec2 rectMin = vec2(0, 0);
    vec2 rectMax = vec2(0.994, 0.994);
    vec2 center = (rectMin + rectMax) / 2.0;
    vec2 halfSize = center - rectMin;
    vec2 fw = vec2(0.005, 0.005);
    vec2 dist = abs(uv - center);
    float col = 0.0; 
    if (all(lessThan(dist, halfSize)) && any(greaterThan(dist, halfSize - fw))) {
        vec2 pixel = uv / fw;
        float aspect = halfSize.y / halfSize.x;
        float dir = (dist.x * aspect > dist.y) ?
              -sign(uv.x - center.x) : sign(uv.y - center.y);
        float dash = step(0.1, fract((pixel.x + pixel.y) * dir / 10.0 + cc_time[0]));
        col = mix(1.0, 0.0, dash);
		ssr_frag_out = vec4(col, col, col, 1.0);
    }else{
		ssr_frag_out = vec4(1, 1, 1, 1);	
	}
  	o *= color;
    ALPHA_TEST(o);
	return o * ssr_frag_out;
	}
}%

