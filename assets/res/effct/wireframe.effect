// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: wireframe-vs:vert
      frag: wireframe-fs:frag
      properties:
        lineColor: { value: [1, 1, 1, 1] }
        dissolve: { value: white, editor: {tooltip: 'dissolve map'} }
        dissolveThreshold: { value: 0.5, editor: { range: [0,1,0.01], slide: true} }
        colorLB: { value: [0, 0, 0, 1], editor: {type: color} }
        colorRB: { value: [1, 1, 1, 1], editor: {type: color} }
        colorLT: { value: [1, 1, 1, 1], editor: {type: color} }
        colorRT: { value: [1, 1, 1, 1], editor: {type: color} }
}%

CCProgram wireframe-vs %{
    precision mediump float;
    #include <cc-global>
    #include <cc-local-batch>
    #include <input>

    uniform TexCoords {
        vec4 lineColor;
    };

    out vec2 bary;
    out vec4 lineCol;
    vec4 vert () {
         vec4 position;
        CCVertInput(position);

        mat4 matWorld;
        CCGetWorldMatrix(matWorld);

        bary = a_texCoord;
        lineCol = lineColor;
        return cc_matProj * (cc_matView * matWorld) * position;;
    }
}%

CCProgram wireframe-fs %{
    precision mediump float;
    #include <output>
    
    in vec2 bary;

    #if USE_TEXTURE
    // 使用溶解纹理
    uniform sampler2D dissolve;
    #endif

    uniform Dissolve {
      vec4 colorLB;
      vec4 colorRB;
      vec4 colorLT;
      vec4 colorRT;
      float dissolveThreshold;
    };

    in vec4 lineCol;
    float value = 1.0;
    vec4 frag () {

      #if USE_TEXTURE
      vec4 dissolveMap = texture(dissolve, bary);
      value *= dissolveMap.r;
      #endif

      // 小于阈值则丢弃
      if (value < dissolveThreshold) {
      discard;
      }

      return mix(mix(colorLT, colorRT, bary.x), mix(colorLB, colorRB, bary.x), mix(colorLT, colorRB, bary.y));
      // return CCFragOutput(lineCol * value);
    }
}%
