/**
 * Date / 日期            : 20211230
 * Ref / 引用             : https://www.shadertoy.com/view/lsf3RH
 * Template / 模板        : v3::builtin-sprite
 */

CCEffect %{
	  techniques: 
    - 
      passes: 
        - 
          vert: sprite-vs:vert
          frag: sprite-fs:frag
          depthStencilState: 
            depthTest: false
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          rasterizerState: 
            cullMode: none
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            alphaThreshold: 
              value: 0.5

}%

CCProgram sprite-vs %{
	precision highp float;
	#include <cc-global>
	#if USE_LOCAL
	  #include <cc-local>
	#endif
	#if SAMPLE_FROM_RT
	  #include <common>
	#endif
	in vec3 a_position;
	in vec2 a_texCoord;
	in vec4 a_color;
  
	out vec4 color;
	out vec2 uv0;
  
	vec4 vert () {
	  vec4 pos = vec4(a_position, 1);
  
	  #if USE_LOCAL
		pos = cc_matWorld * pos;
	  #endif
  
	  #if USE_PIXEL_ALIGNMENT
		pos = cc_matView * pos;
		pos.xyz = floor(pos.xyz);
		pos = cc_matProj * pos;
	  #else
		pos = cc_matViewProj * pos;
	  #endif
  
	  uv0 = a_texCoord;
	  #if SAMPLE_FROM_RT
		CC_HANDLE_RT_SAMPLE_FLIP(uv0);
	  #endif
	  color = a_color;
  
	  return pos;
	}
}%

CCProgram sprite-fs %{
	precision highp float;
	#include <embedded-alpha>
	#include <alpha-test>
	#include <cc-global>
  
	in vec4 color;
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  #pragma builtin(local)
	  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
	#endif

	uniform Uniforms {
			vec4 iMouse;
	vec2 iResolution;

  	};
	
	float snoise(vec3 uv, float res)
{
	const vec3 s = vec3(1e0, 1e2, 1e3);
	uv *= res;
	vec3 uv0 = floor(mod(uv, res))*s;
	vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;
	vec3 f = fract(uv); f = f*f*(3.0-2.0*f);
	vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
		      	  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);
	vec4 r = fract(sin(v*1e-1)*1e3);
	float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);
	r = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);
	float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);
	return mix(r0, r1, f.z)*2.-1.;
}
vec4 frag() {
	vec4 ssr_frag_out;
	vec2 p = -.5 + uv0;
	p.x *= iResolution.x/iResolution.y;
	float color = 3.0 - (3.*length(2.*p));
	vec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);
	for(int i = 1; i <= 7; i++)
	{
		float power = pow(2.0, float(i));
		color += (1.5 / power) * snoise(coord + vec3(0.,-cc_time[0]*.05, cc_time[0]*.01), power*16.);
	}
	ssr_frag_out = vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , 1.0);

		return ssr_frag_out;
}
  }%

