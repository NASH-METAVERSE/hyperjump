/**
 * Date / 日期            : 20211230
 * Ref / 引用             : https://www.shadertoy.com/view/lsfGzr
 * Template / 模板        : v3::builtin-sprite
 */

CCEffect %{
	  techniques: 
    - 
      passes: 
        - 
          vert: sprite-vs:vert
          frag: sprite-fs:frag
          depthStencilState: 
            depthTest: false
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          rasterizerState: 
            cullMode: none
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            alphaThreshold: 
              value: 0.5

}%

CCProgram sprite-vs %{
	precision highp float;
	#include <cc-global>
	#if USE_LOCAL
	  #include <cc-local>
	#endif
	#if SAMPLE_FROM_RT
	  #include <common>
	#endif
	in vec3 a_position;
	in vec2 a_texCoord;
	in vec4 a_color;
  
	out vec4 color;
	out vec2 uv0;
  
	vec4 vert () {
	  vec4 pos = vec4(a_position, 1);
  
	  #if USE_LOCAL
		pos = cc_matWorld * pos;
	  #endif
  
	  #if USE_PIXEL_ALIGNMENT
		pos = cc_matView * pos;
		pos.xyz = floor(pos.xyz);
		pos = cc_matProj * pos;
	  #else
		pos = cc_matViewProj * pos;
	  #endif
  
	  uv0 = a_texCoord;
	  #if SAMPLE_FROM_RT
		CC_HANDLE_RT_SAMPLE_FLIP(uv0);
	  #endif
	  color = a_color;
  
	  return pos;
	}
}%

CCProgram sprite-fs %{
	precision highp float;
	#include <embedded-alpha>
	#include <alpha-test>
	#include <cc-global>
  
	in vec4 color;
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  #pragma builtin(local)
	  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
	#endif

	uniform Uniforms {
			vec4 iMouse;
	vec2 iResolution;

  	};
	
	#define time cc_time[0]
float makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){
   float xx=x+sin(t*fx)*sx;
   float yy=y+cos(t*fy)*sy;
   return 1.0/sqrt(xx*xx+yy*yy);
}
vec4 frag() {
	vec4 ssr_frag_out;
   vec2 p=(2.0 * uv0 - 1.0);
   p=p*2.0;
   float x=p.x;
   float y=p.y;
   float a=
       makePoint(x,y,3.3,2.9,0.3,0.3,time);
   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,time);
   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,time);
   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,time);
   a=a+makePoint(x,y,0.8,1.7,0.5,0.4,time);
   a=a+makePoint(x,y,0.3,1.0,0.4,0.4,time);
   a=a+makePoint(x,y,1.4,1.7,0.4,0.5,time);
   a=a+makePoint(x,y,1.3,2.1,0.6,0.3,time);
   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,time);   
   float b=
       makePoint(x,y,1.2,1.9,0.3,0.3,time);
   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,time);
   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,time);
   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,time);
   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,time);
   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,time);
   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,time);
   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,time);
   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,time);
   float c=
       makePoint(x,y,3.7,0.3,0.3,0.3,time);
   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,time);
   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,time);
   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,time);
   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,time);
   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,time);
   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,time);
   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,time);
   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,time);
   vec3 d=vec3(a,b,c)/32.0;
   ssr_frag_out = vec4(d.x,d.y,d.z,(d.x+d.y+d.z)/3.0);

		return ssr_frag_out;
}
  }%

