/**
 * Date / 日期            : 20211230
 * Ref / 引用             : https://www.shadertoy.com/view/XdfXRB
 * Template / 模板        : v3::builtin-sprite
 */

CCEffect %{
	  techniques: 
    - 
      passes: 
        - 
          vert: sprite-vs:vert
          frag: sprite-fs:frag
          depthStencilState: 
            depthTest: false
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          rasterizerState: 
            cullMode: none
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            alphaThreshold: 
              value: 0.5

}%

CCProgram sprite-vs %{
	precision highp float;
	#include <cc-global>
	#if USE_LOCAL
	  #include <cc-local>
	#endif
	#if SAMPLE_FROM_RT
	  #include <common>
	#endif
	in vec3 a_position;
	in vec2 a_texCoord;
	in vec4 a_color;
  
	out vec4 color;
	out vec2 uv0;
  
	vec4 vert () {
	  vec4 pos = vec4(a_position, 1);
  
	  #if USE_LOCAL
		pos = cc_matWorld * pos;
	  #endif
  
	  #if USE_PIXEL_ALIGNMENT
		pos = cc_matView * pos;
		pos.xyz = floor(pos.xyz);
		pos = cc_matProj * pos;
	  #else
		pos = cc_matViewProj * pos;
	  #endif
  
	  uv0 = a_texCoord;
	  #if SAMPLE_FROM_RT
		CC_HANDLE_RT_SAMPLE_FLIP(uv0);
	  #endif
	  color = a_color;
  
	  return pos;
	}
}%

CCProgram sprite-fs %{
	precision highp float;
	#include <embedded-alpha>
	#include <alpha-test>
	#include <cc-global>
  
	in vec4 color;
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  #pragma builtin(local)
	  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
	#endif

	uniform Uniforms {
			vec4 iMouse;
	vec2 iResolution;

  	};
	
	vec4 frag() {
	vec4 ssr_frag_out;
	vec2 uv = uv0;
	vec3 orig = texture(cc_spriteTexture, uv).xyz;	
	vec3 col = orig * orig * 1.4; 				
	float bri = (col.x+col.y+col.z)/3.0;		
	float v = smoothstep(.0, .7, bri);			
	col = mix(vec3(0., 1., 1.2) * bri, col, v);
	v = smoothstep(.2, 1.1, bri);				
	col = mix(col, min(vec3(1.0, .55, 0.) * bri, 1.0), v);
	float x = (iMouse.x / iResolution.x); 
	col = mix(orig, col, step(x, uv.x));		
	ssr_frag_out = vec4(min(col, 1.0),1.0);

		return ssr_frag_out;
}
  }%

