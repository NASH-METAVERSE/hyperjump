/**
 * Date / 日期            : 20220326
 * Ref / 引用             : https://www.shadertoy.com/view/MdlXWr
 * Template / 模板        : v3::builtin-sprite
 */

CCEffect %{
	  techniques: 
    - 
      passes: 
        - 
          vert: sprite-vs:vert
          frag: sprite-fs:frag
          depthStencilState: 
            depthTest: false
            depthWrite: false
          blendState: 
            targets: 
              - 
                blend: true
                blendSrc: src_alpha
                blendDst: one_minus_src_alpha
                blendDstAlpha: one_minus_src_alpha
          rasterizerState: 
            cullMode: none
          properties: 
            iResolution: 
              value: 
                - 960
                - 640
            iMouse: 
              value: 
                - 0.5
                - 0.5
                - 0.5
                - 0.5
            alphaThreshold: 
              value: 0.5
            fBrightness: 
              value: 2.5
            fSteps: 
              value: 121.0
            fParticleSize: 
              value: 0.015
            fParticleLength: 
              value: 0.008
            fMinDist: 
              value: 0.8
            fMaxDist: 
              value: 5.0
            fRepeatMin: 
              value: 1.0
            fRepeatMax: 
              value: 2.0
            fDepthFade: 
              value: 0.8

}%

CCProgram sprite-vs %{
	precision highp float;
	#include <cc-global>
	#if USE_LOCAL
	  #include <cc-local>
	#endif
	#if SAMPLE_FROM_RT
	  #include <common>
	#endif
	in vec3 a_position;
	in vec2 a_texCoord;
	in vec4 a_color;
  
	out vec4 color;
	out vec2 uv0;
  
	vec4 vert () {
	  vec4 pos = vec4(a_position, 1);
  
	  #if USE_LOCAL
		pos = cc_matWorld * pos;
	  #endif
  
	  #if USE_PIXEL_ALIGNMENT
		pos = cc_matView * pos;
		pos.xyz = floor(pos.xyz);
		pos = cc_matProj * pos;
	  #else
		pos = cc_matViewProj * pos;
	  #endif
  
	  uv0 = a_texCoord;
	  #if SAMPLE_FROM_RT
		CC_HANDLE_RT_SAMPLE_FLIP(uv0);
	  #endif
	  color = a_color;
  
	  return pos;
	}
}%

CCProgram sprite-fs %{
	precision highp float;
	#include <embedded-alpha>
	#include <alpha-test>
	#include <cc-global>
  
	in vec4 color;
  
	#if USE_TEXTURE
	  in vec2 uv0;
	  #pragma builtin(local)
	  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
	#endif

	uniform Uniforms {
	vec4 iMouse;
	vec2 iResolution;
	float fBrightness;
	float fSteps;
	float fParticleSize;
	float fParticleLength;
	float fMinDist;
	float fMaxDist;
	float fRepeatMin;
	float fRepeatMax;
	float fDepthFade;

  	};
	
	#define PASS_COUNT 1

float Random(float x)
{
	return fract(sin(x * 123.456) * 23.4567 + sin(x * 345.678) * 45.6789 + sin(x * 456.789) * 56.789);
}
vec3 GetParticleColour( const in vec3 vParticlePos, const in float fParticleSize, const in vec3 vRayDir )
{		
	vec2 vNormDir = normalize(vRayDir.xy);
	float d1 = dot(vParticlePos.xy, vNormDir.xy) / length(vRayDir.xy);
	vec3 vClosest2d = vRayDir * d1;
	vec3 vClampedPos = vParticlePos;
	vClampedPos.z = clamp(vClosest2d.z, vParticlePos.z - fParticleLength, vParticlePos.z + fParticleLength);
	float d = dot(vClampedPos, vRayDir);
	vec3 vClosestPos = vRayDir * d;
	vec3 vDeltaPos = vClampedPos - vClosestPos;	
	float fClosestDist = length(vDeltaPos) / fParticleSize;
	float fShade = 	clamp(1.0 - fClosestDist, 0.0, 1.0);
	fShade = fShade * exp2(-d * fDepthFade) * fBrightness;
	return vec3(fShade);
}
vec3 GetParticlePos( const in vec3 vRayDir, const in float fZPos, const in float fSeed )
{
	float fAngle = atan(vRayDir.x, vRayDir.y);
	float fAngleFraction = fract(fAngle / (3.14 * 2.0));
	float fSegment = floor(fAngleFraction * fSteps + fSeed) + 0.5 - fSeed;
	float fParticleAngle = fSegment / fSteps * (3.14 * 2.0);
	float fSegmentPos = fSegment / fSteps;
	float fRadius = fMinDist + Random(fSegmentPos + fSeed) * (fMaxDist - fMinDist);
	float tunnelZ = vRayDir.z / length(vRayDir.xy / fRadius);
	tunnelZ += fZPos;
	float fRepeat = fRepeatMin + Random(fSegmentPos + 0.1 + fSeed) * (fRepeatMax - fRepeatMin);
	float fParticleZ = (ceil(tunnelZ / fRepeat) - 0.5) * fRepeat - fZPos;
	return vec3( sin(fParticleAngle) * fRadius, cos(fParticleAngle) * fRadius, fParticleZ );
}
vec3 Starfield( const in vec3 vRayDir, const in float fZPos, const in float fSeed )
{	
	vec3 vParticlePos = GetParticlePos(vRayDir, fZPos, fSeed);
	return GetParticleColour(vParticlePos, fParticleSize, vRayDir);	
}
vec3 RotateX( const in vec3 vPos, const in float fAngle )
{
    float s = sin(fAngle);
    float c = cos(fAngle);
    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);
    return vResult;
}
vec3 RotateY( const in vec3 vPos, const in float fAngle )
{
    float s = sin(fAngle);
    float c = cos(fAngle);
    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);
    return vResult;
}
vec3 RotateZ( const in vec3 vPos, const in float fAngle )
{
    float s = sin(fAngle);
    float c = cos(fAngle);
    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);
    return vResult;
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 vScreenUV = uv0;
	vec2 vScreenPos = vScreenUV * 2.0 - 1.0;
	vScreenPos.x *= iResolution.x / iResolution.y;
	vec3 vRayDir = normalize(vec3(vScreenPos, 1.0));
	vec3 vEuler = vec3(0.5 + sin(cc_time[0] * 0.2) * 0.125, 0.5 + sin(cc_time[0] * 0.1) * 0.125, cc_time[0] * 0.1 + sin(cc_time[0] * 0.3) * 0.5);
	if(iMouse.z > 0.0)
	{
		vEuler.x = -((iMouse.y / iResolution.y) * 2.0 - 1.0);
		vEuler.y = -((iMouse.x / iResolution.x) * 2.0 - 1.0);
		vEuler.z = 0.0;
	}
	vRayDir = RotateX(vRayDir, vEuler.x);
	vRayDir = RotateY(vRayDir, vEuler.y);
	vRayDir = RotateZ(vRayDir, vEuler.z);
	float fShade = 0.0;
	float a = 0.2;
	float b = 10.0;
	float c = 1.0;
	float fZPos = 5.0 + cc_time[0] * c + sin(cc_time[0] * a) * b;
	float fSpeed = c + a * b * cos(a * cc_time[0]);
	float fParticleLength = 0.25 * fSpeed / 60.0;
	float fSeed = 0.0;
	vec3 vResult = mix(vec3(0.005, 0.0, 0.01), vec3(0.01, 0.005, 0.0), vRayDir.y * 0.5 + 0.5);
	for(int i=0; i<PASS_COUNT; i++)
	{
		vResult += Starfield(vRayDir, fZPos, fSeed);
		fSeed += 1.234;
	}
	fragColor = vec4(sqrt(vResult),1.0);
}
vec4 frag() {
	vec4 ssr_frag_out;
	vec2 vScreenUV = uv0;
	vec2 vScreenPos = vScreenUV * 2.0 - 1.0;
	vScreenPos.x *= iResolution.x / iResolution.y;
	vec3 vRayDir = normalize(vec3(vScreenPos, 1.0));
	vec3 vEuler = vec3(0.5 + sin(cc_time[0] * 0.2) * 0.125, 0.5 + sin(cc_time[0] * 0.1) * 0.125, cc_time[0] * 0.1 + sin(cc_time[0] * 0.3) * 0.5);
	if(iMouse.z > 0.0)
	{
		vEuler.x = -((iMouse.y / iResolution.y) * 2.0 - 1.0);
		vEuler.y = -((iMouse.x / iResolution.x) * 2.0 - 1.0);
		vEuler.z = 0.0;
	}
	vRayDir = RotateX(vRayDir, vEuler.x);
	vRayDir = RotateY(vRayDir, vEuler.y);
	vRayDir = RotateZ(vRayDir, vEuler.z);
	float fShade = 0.0;
	float a = 0.2;
	float b = 10.0;
	float c = 1.0;
	float fZPos = 5.0 + cc_time[0] * c + sin(cc_time[0] * a) * b;
	float fSpeed = c + a * b * cos(a * cc_time[0]);
	float fParticleLength = 0.25 * fSpeed / 60.0;
	float fSeed = 0.0;
	vec3 vResult = mix(vec3(0.005, 0.0, 0.01), vec3(0.01, 0.005, 0.0), vRayDir.y * 0.5 + 0.5);
	for(int i=0; i<PASS_COUNT; i++)
	{
		vResult += Starfield(vRayDir, fZPos, fSeed);
		fSeed += 1.234;
	}
	ssr_frag_out = vec4(sqrt(vResult),1.0);
	return ssr_frag_out;
	}
  }%

